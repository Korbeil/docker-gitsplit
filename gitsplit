#!/usr/bin/env python

import os
import io
import sys
import yaml
import tempfile
import subprocess
import re
import hashlib
from multiprocessing.pool import ThreadPool

CONFIG_FILE = ".gitsplit.yml"

def get_config_file():
    file_path = os.path.join(os.getcwd(), CONFIG_FILE)
    if not os.path.exists(file_path):
        raise Exception('Config fail not found at %s' % file_path)

    content = ''
    with open(file_path, 'r') as f:
        for line in f:
            content+=expandvars(line)

    return yaml.load(content)

def expandvars(string, default=None, skip_escaped=False):
    """Expand environment variables of form $var and ${var}.
       If parameter 'skip_escaped' is True, all escaped variable references
       (i.e. preceded by backslashes) are skipped.
       Unknown variables are set to 'default'. If 'default' is None,
       they are left unchanged.
    """
    def replace_var(m):
        return os.environ.get(m.group(2) or m.group(1), m.group(0) if default is None else default)
    reVar = r'\$(\w+|\{([^}]*)\})'
    return re.sub(reVar, replace_var, string)


def get_config():
    config = {
        'cache_dir': tempfile.mkdtemp(),
        'project_dir': os.getcwd()
    }
    config.update(get_config_file())
    config['cache_dir'] = os.path.join(resolve_path(config['cache_dir']), '.git')
    config['project_dir'] = os.path.join(resolve_path(config['project_dir']), '.git')
    if 'origins' not in config:
        config['origins'] = ['.*']
    for split in config['splits']:
        if not isinstance(split['prefix'], list):
            split['prefix'] = [split['prefix']]
        if not isinstance(split['target'], list):
            split['target'] = [split['target']]

    return config


def resolve_path(path):
    if os.path.isabs(path):
        return path
    else:
        return os.path.join(os.getcwd(), path)


def init_workspace(config):
    # Init cache repo
    if not os.path.exists(config['cache_dir']):
        execute(['git', 'init', os.path.dirname(config['cache_dir'])])

    # Init cache's remotes
    remotes = execute(['git', '--git-dir', config['cache_dir'], 'remote']).splitlines()
    known_remotes = ['origin']
    for split in config['splits']:
        for (target_index, target) in enumerate(split['target']):
            remote = sha256(target)
            if remote not in known_remotes:
                known_remotes.append(remote)
                if remote in remotes:
                    execute(['git', '--git-dir', config['cache_dir'], 'remote', 'set-url', remote, target])
                else:
                    execute(['git', '--git-dir', config['cache_dir'], 'remote', 'add', remote, target])
            print('Fetching %s' % target)
            execute(['git', '--git-dir', config['cache_dir'], 'fetch', '-p', remote])
    for remote in (x for x in remotes if x not in known_remotes):
        execute(['git', '--git-dir', config['cache_dir'], 'remote', 'remove', remote])

    # pull code from project
    if 'origin' in execute(['git', '--git-dir', config['cache_dir'], 'remote']).splitlines():
        execute(['git', '--git-dir', config['cache_dir'], 'remote', 'set-url', 'origin', 'file://%s' % config['project_dir']])
    else:
        execute(['git', '--git-dir', config['cache_dir'], 'remote', 'add', 'origin', 'file://%s' % config['project_dir']])
    execute(['git', '--git-dir', config['cache_dir'], 'fetch', '-p', 'origin'])
    execute(['git', '--git-dir', config['cache_dir'], 'fetch', '--tags', 'origin'])

remotes_references = {}
def get_references(config, remote):
    if not remote in remotes_references:
        remotes_references[remote] = dict([(x.split('\t', 2)[-1], x.split('\t', 2)[0]) for x in execute(['git', '--git-dir', config['cache_dir'], 'ls-remote', remote]).splitlines()])
    return remotes_references[remote]

def get_reference_name(ref):
    for prefix in ['refs/tags/', 'refs/heads/']:
        if not ref.startswith(prefix):
            continue
        return ref[len(prefix):]

def split_project(config):
    # build remote position cache
    splits=[]
    for ref_pattern in config['origins']:
        splits += split_reference(config, ref_pattern)
    splits = [x + (config,) for x in splits]

    pool = ThreadPool(5)
    pool.map(push_branch, splits)
    pool.close()
    pool.join()


def split_reference(config, ref_pattern):
    re_pattern = re.compile(ref_pattern)
    splits = []
    for (reference_ref, reference_sha1) in get_references(config, 'origin').items():
        reference_name = get_reference_name(reference_ref)
        if not reference_name:
            continue
        if not re_pattern.match(reference_name):
            continue

        splits_sha1 = split_reference_sha1(config, reference_sha1, reference_name)
        splits += [x + (reference_ref,) for x in splits_sha1]

    return splits

def split_reference_sha1(config, reference_sha1, reference_name):
    splits = []
    for split in config['splits']:
        print('Spliting "%s" for %s' % (reference_name, split['prefix']))

        args = []
        for prefix in split['prefix']:
            args += ['-prefix', prefix]

        temp_branch = 'refs/split/%s' % reference_sha1
        try:
            execute(['git', '--git-dir', config['cache_dir'], 'update-ref', temp_branch, reference_sha1])
            split_sha1 = execute(['splitsh-lite', '-origin', temp_branch, '-path', config['cache_dir']] + args)
        finally:
            execute(['git', '--git-dir', config['cache_dir'], 'update-ref', '-d', temp_branch])

        if not split_sha1:
            continue

        for (target_index, target) in enumerate(split['target']):
            splits.append((target, split_sha1))
    return splits

def sha256(text):
    return hashlib.sha256(text).hexdigest()

def push_branch(arguments):
    (target, sha1, reference, config) = arguments
    remote = sha256(target)

    remote_references = get_references(config, remote)
    if reference in remotes_references[remote] and remotes_references[remote][reference] == sha1:
        print('Already pushed "%s" into %s' % (reference, target))
        return

    print('Pushing "%s" into %s' % (reference, target))
    execute(['git', '--git-dir', config['cache_dir'], 'push', '-f', remote, '%s:%s' % (sha1, reference)])

def execute(command):
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if p.returncode > 0:
        error = 'Error in command "%s":%s' % (" ".join(command), stderr)

        raise Exception(error)

    return stdout.strip()

def main():
    config = get_config()
    init_workspace(config)
    split_project(config)

if __name__ == '__main__':
    main()
